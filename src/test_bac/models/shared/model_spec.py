"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import model_deal as shared_model_deal
from ..shared import model_engine as shared_model_engine
from ..shared import model_jobspecdocker as shared_model_jobspecdocker
from ..shared import model_jobspecwasm as shared_model_jobspecwasm
from ..shared import model_labelselectorrequirement as shared_model_labelselectorrequirement
from ..shared import model_networkconfig as shared_model_networkconfig
from ..shared import model_publisher as shared_model_publisher
from ..shared import model_publisherspec as shared_model_publisherspec
from ..shared import model_resourceusageconfig as shared_model_resourceusageconfig
from ..shared import model_storagespec as shared_model_storagespec
from dataclasses_json import Undefined, dataclass_json
from test_bac import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ModelSpec:
    annotations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Annotations'), 'exclude': lambda f: f is None }})
    r"""Annotations on the job - could be user or machine assigned"""
    deal: Optional[shared_model_deal.ModelDeal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Deal'), 'exclude': lambda f: f is None }})
    r"""The deal the client has made, such as which job bids they have accepted."""
    docker: Optional[shared_model_jobspecdocker.ModelJobSpecDocker] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Docker'), 'exclude': lambda f: f is None }})
    r"""executor specific data"""
    do_not_track: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DoNotTrack'), 'exclude': lambda f: f is None }})
    r"""Do not track specified by the client"""
    engine: Optional[shared_model_engine.ModelEngine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Engine'), 'exclude': lambda f: f is None }})
    r"""e.g. docker or language"""
    inputs: Optional[list[shared_model_storagespec.ModelStorageSpec]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Inputs'), 'exclude': lambda f: f is None }})
    r"""the data volumes we will read in the job
    for example \"read this ipfs cid\" 
    """
    network: Optional[shared_model_networkconfig.ModelNetworkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Network'), 'exclude': lambda f: f is None }})
    r"""The type of networking access that the job needs"""
    node_selectors: Optional[list[shared_model_labelselectorrequirement.ModelLabelSelectorRequirement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeSelectors'), 'exclude': lambda f: f is None }})
    r"""NodeSelectors is a selector which must be true for the compute node to run this job."""
    outputs: Optional[list[shared_model_storagespec.ModelStorageSpec]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Outputs'), 'exclude': lambda f: f is None }})
    r"""the data volumes we will write in the job
    for example \"write the results to ipfs\" 
    """
    publisher: Optional[shared_model_publisher.ModelPublisher] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Publisher'), 'exclude': lambda f: f is None }})
    r"""there can be multiple publishers for the job
    deprecated: use PublisherSpec instead
    """
    publisher_spec: Optional[shared_model_publisherspec.ModelPublisherSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PublisherSpec'), 'exclude': lambda f: f is None }})
    resources: Optional[shared_model_resourceusageconfig.ModelResourceUsageConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Resources'), 'exclude': lambda f: f is None }})
    r"""the compute (cpu, ram) resources this job requires"""
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Timeout'), 'exclude': lambda f: f is None }})
    r"""How long a job can run in seconds before it is killed.
    This includes the time required to run, verify and publish results
    """
    wasm: Optional[shared_model_jobspecwasm.ModelJobSpecWasm] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Wasm'), 'exclude': lambda f: f is None }})
    

