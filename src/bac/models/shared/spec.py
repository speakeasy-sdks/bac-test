"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .deal import Deal
from .engine import Engine
from .jobspecdocker import JobSpecDocker
from .jobspecwasm import JobSpecWasm
from .labelselectorrequirement import LabelSelectorRequirement
from .networkconfig import NetworkConfig
from .publisher import Publisher
from .publisherspec import PublisherSpec
from .resourceusageconfig import ResourceUsageConfig
from .storagespec import StorageSpec
from bac import utils
from dataclasses_json import Undefined, dataclass_json
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Spec:
    annotations: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Annotations'), 'exclude': lambda f: f is None }})
    r"""Annotations on the job - could be user or machine assigned"""
    deal: Optional[Deal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Deal'), 'exclude': lambda f: f is None }})
    r"""The deal the client has made, such as which job bids they have accepted."""
    docker: Optional[JobSpecDocker] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Docker'), 'exclude': lambda f: f is None }})
    r"""executor specific data"""
    do_not_track: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DoNotTrack'), 'exclude': lambda f: f is None }})
    r"""Do not track specified by the client"""
    engine: Optional[Engine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Engine'), 'exclude': lambda f: f is None }})
    r"""e.g. docker or language"""
    inputs: Optional[List[StorageSpec]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Inputs'), 'exclude': lambda f: f is None }})
    r"""the data volumes we will read in the job
    for example \"read this ipfs cid\" 
    """
    network: Optional[NetworkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Network'), 'exclude': lambda f: f is None }})
    r"""The type of networking access that the job needs"""
    node_selectors: Optional[List[LabelSelectorRequirement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeSelectors'), 'exclude': lambda f: f is None }})
    r"""NodeSelectors is a selector which must be true for the compute node to run this job."""
    outputs: Optional[List[StorageSpec]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Outputs'), 'exclude': lambda f: f is None }})
    r"""the data volumes we will write in the job
    for example \"write the results to ipfs\" 
    """
    publisher: Optional[Publisher] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Publisher'), 'exclude': lambda f: f is None }})
    r"""there can be multiple publishers for the job
    deprecated: use PublisherSpec instead
    """
    publisher_spec: Optional[PublisherSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PublisherSpec'), 'exclude': lambda f: f is None }})
    resources: Optional[ResourceUsageConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Resources'), 'exclude': lambda f: f is None }})
    r"""the compute (cpu, ram) resources this job requires"""
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Timeout'), 'exclude': lambda f: f is None }})
    r"""How long a job can run in seconds before it is killed.
    This includes the time required to run, verify and publish results
    """
    wasm: Optional[JobSpecWasm] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Wasm'), 'exclude': lambda f: f is None }})
    

