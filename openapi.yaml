openapi: 3.0.0
info:
  contact:
    email: team@bacalhau.org
    name: Bacalhau Team
    url: 'https://github.com/bacalhau-project/bacalhau'
  description: >-
    This page is the reference of the Bacalhau REST API. Project docs are
    available at https://docs.bacalhau.org/. Find more information about
    Bacalhau at https://github.com/bacalhau-project/bacalhau.
  license:
    name: Apache 2.0
    url: 'https://github.com/bacalhau-project/bacalhau/blob/main/LICENSE'
  title: Bacalhau API
  version: ''
servers:
  - url: 'http://bootstrap.production.bacalhau.org:1234/'
paths:
  /approve:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      operationId: apiServer/approver
      summary: Approves a job to be run on this compute node.
  /debug:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Health
      operationId: apiServer/debug
      summary: Returns debug information on what the current node is doing.
  /healthz:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.HealthInfo'
          description: OK
      tags:
        - Utils
      operationId: healthz
  /id:
    get:
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
        '500':
          content:
            text/plain:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Utils
      operationId: id
      summary: Returns the id of the host node.
  /livez:
    get:
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: TODO
      tags:
        - Utils
      operationId: livez
  /logz:
    get:
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: TODO
      tags:
        - Utils
      operationId: logz
  /node_info:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.NodeInfo'
          description: OK
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Utils
      operationId: nodeInfo
      summary: Returns the info of the node.
  /peers:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/peer.AddrInfo'
                type: array
          description: OK
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Utils
      description: >-
        As described in the [architecture
        docs](https://docs.bacalhau.org/about-bacalhau/architecture), each node
        is connected to a number of peer nodes.


        Example response:

        ```json

        {
          "bacalhau-job-event": [
            "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
            "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF",
            "QmVAb7r2pKWCuyLpYWoZr9syhhFnTWeFaByHdb8PkkhLQG",
            "QmUDAXvv31WPZ8U9CzuRTMn9iFGiopGE7rHiah1X8a6PkT",
            "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86"
          ]
        }

        ```
      operationId: peers
      summary: Returns the peers connected to the host via the transport layer.
  /readyz:
    get:
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
      tags:
        - Utils
      operationId: readyz
  /requester/cancel:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicapi.cancelResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Job
      description: >-
        Cancels a job specified by `id` as long as that job belongs to
        `client_id`.


        Returns the current jobstate after the cancel request has been
        processed.
      operationId: pkg/requester/publicapi/cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publicapi.cancelRequest'
        description: ' '
        required: true
      summary: Cancels the job with the job-id specified in the body payload.
  /requester/debug:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Health
      operationId: pkg/requester/publicapi/debug
      summary: Returns debug information on what the current node is doing.
  /requester/events:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicapi.eventsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Job
      description: >
        Events (e.g. Created, Bid, BidAccepted, ..., ResultsAccepted,
        ResultsPublished) are useful to track the progress of a job.
      operationId: pkg/requester/publicapi/events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publicapi.eventsRequest'
        description: >-
          Request must specify a `client_id`. To retrieve your `client_id`, you
          can do the following: (1) submit a dummy job to Bacalhau (or use one
          you created before), (2) run `bacalhau describe <job-id>` and fetch
          the `ClientID` field.
        required: true
      summary: >-
        Returns the events related to the job-id passed in the body payload.
        Useful for troubleshooting.
  /requester/list:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicapi.listResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Job
      description: >-
        Returns the first (sorted) #`max_jobs` jobs that belong to the
        `client_id` passed in the body payload (by default).

        If `return_all` is set to true, it returns all jobs on the Bacalhau
        network.


        If `id` is set, it returns only the job with that ID.
      operationId: pkg/requester/publicapi/list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publicapi.listRequest'
        description: >-
          Set `return_all` to `true` to return all jobs on the network (may
          degrade performance, use with care!).
        required: true
      summary: Simply lists jobs.
  /requester/logs:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Job
      description: >-
        Shows the output from the job specified by `id` as long as that job
        belongs to `client_id`.


        The ouput will be continuous until either, the client disconnects or the
        execution completes.
      operationId: pkg/requester/publicapi/logs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publicapi.logRequest'
        description: ' '
        required: true
      summary: Displays the logs for a current job/execution
  /requester/nodes:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/model.NodeInfo'
                type: array
          description: OK
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      operationId: pkg/requester/publicapi/nodes
      summary: Displays the nodes that this requester knows about
  /requester/results:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicapi.resultsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Job
      description: |-
        Example response:

        ```json
        {
          "results": [
            {
              "NodeID": "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
              "Data": {
                "StorageSource": "IPFS",
                "Name": "job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                "CID": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
              }
            }
          ]
        }
        ```
      operationId: pkg/requester/publicapi/results
      requestBody:
        $ref: '#/components/requestBodies/publicapi.stateRequest'
      summary: Returns the results of the job-id specified in the body payload.
  /requester/states:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicapi.stateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Job
      description: |-
        Example response:

        ```json
        {
          "state": {
            "Nodes": {
              "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86": {
                "Shards": {
                  "0": {
                    "NodeId": "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86",
                    "State": "Cancelled",
                    "VerificationResult": {},
                    "PublishedResults": {}
                  }
                }
              },
              "QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3": {
                "Shards": {
                  "0": {
                    "NodeId": "QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3",
                    "State": "Cancelled",
                    "VerificationResult": {},
                    "PublishedResults": {}
                  }
                }
              },
              "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL": {
                "Shards": {
                  "0": {
                    "NodeId": "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                    "State": "Completed",
                    "Status": "Got results proposal of length: 0",
                    "VerificationResult": {
                      "Complete": true,
                      "Result": true
                    },
                    "PublishedResults": {
                      "StorageSource": "IPFS",
                      "Name": "job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                      "CID": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
                    },
                    "RunOutput": {
                      "stdout": "Thu Nov 17 13:32:55 UTC 2022\n",
                      "stdouttruncated": false,
                      "stderr": "",
                      "stderrtruncated": false,
                      "exitCode": 0,
                      "runnerError": ""
                    }
                  }
                }
              }
            }
          }
        }
        ```
      operationId: pkg/requester/publicapi/states
      requestBody:
        $ref: '#/components/requestBodies/publicapi.stateRequest'
      summary: Returns the state of the job-id specified in the body payload.
  /requester/submit:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicapi.submitResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Job
      description: "Description:\n\n* `client_public_key`: The base64-encoded public key of the client.\n* `signature`: A base64-encoded signature of the `data` attribute, signed by the client.\n* `payload`:\n    * `ClientID`: Request must specify a `ClientID`. To retrieve your `ClientID`, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run `bacalhau describe <job-id>` and fetch the `ClientID` field.\n\t* `APIVersion`: e.g. `\"V1beta1\"`.\n    * `Spec`: https://github.com/bacalhau-project/bacalhau/blob/main/pkg/model/job.go\n"
      operationId: pkg/requester/publicapi/submit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publicapi.submitRequest'
        description: ' '
        required: true
      summary: Submits a new job to the network.
  /varz:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: integer
                type: array
          description: OK
      tags:
        - Utils
      operationId: varz
  /version:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicapi.VersionResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      tags:
        - Misc
      description: >-
        See https://github.com/bacalhau-project/bacalhau/releases for a complete
        list of `gitversion` tags.
      operationId: apiServer/version
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publicapi.VersionRequest'
        description: >-
          Request must specify a `client_id`. To retrieve your `client_id`, you
          can do the following: (1) submit a dummy job to Bacalhau (or use one
          you created before), (2) run `bacalhau describe <job-id>` and fetch
          the `ClientID` field.
        required: true
      summary: Returns the build version running on the server.
components:
  requestBodies:
    publicapi.stateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/publicapi.stateRequest'
      description: ' '
      required: true
  schemas:
    model.BuildVersionInfo:
      properties:
        builddate:
          example: '2022-11-16T14:03:31Z'
          type: string
        gitcommit:
          example: d612b63108f2b5ce1ab2b9e02444eb1dac1d922d
          type: string
        gitversion:
          example: v0.3.12
          type: string
        goarch:
          example: amd64
          type: string
        goos:
          example: linux
          type: string
        major:
          example: '0'
          type: string
        minor:
          example: '3'
          type: string
      type: object
    model.ComputeNodeInfo:
      properties:
        AvailableCapacity:
          $ref: '#/components/schemas/model.ResourceUsageData'
        EnqueuedExecutions:
          type: integer
        ExecutionEngines:
          items:
            $ref: '#/components/schemas/model.Engine'
          type: array
        MaxCapacity:
          $ref: '#/components/schemas/model.ResourceUsageData'
        MaxJobRequirements:
          $ref: '#/components/schemas/model.ResourceUsageData'
        Publishers:
          items:
            $ref: '#/components/schemas/model.Publisher'
          type: array
        RunningExecutions:
          type: integer
        StorageSources:
          items:
            $ref: '#/components/schemas/model.StorageSourceType'
          type: array
      type: object
    model.Deal:
      properties:
        Concurrency:
          description: |-
            The maximum number of concurrent compute node bids that will be
            accepted by the requester node on behalf of the client.
          type: integer
        TargetingMode:
          description: >-
            Whether the job should be run on any matching node (false) or all

            matching nodes (true). If true, other fields in this struct are
            ignored.
          type: boolean
      type: object
    model.Engine:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      type: integer
      x-enum-comments:
        engineDone: must be last
        engineUnknown: must be first
      x-enum-varnames:
        - engineUnknown
        - EngineNoop
        - EngineDocker
        - EngineWasm
        - engineDone
    model.ExecutionDesiredState:
      enum:
        - 0
        - 1
        - 2
      type: integer
      x-enum-varnames:
        - ExecutionDesiredStatePending
        - ExecutionDesiredStateRunning
        - ExecutionDesiredStateStopped
    model.ExecutionState:
      properties:
        ComputeReference:
          description: Compute node reference for this job execution
          type: string
        CreateTime:
          description: CreateTime is the time when the job was created.
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/schemas/model.ExecutionDesiredState'
          description: DesiredState is the desired state of the execution
        JobID:
          description: JobID the job id
          type: string
        NodeId:
          description: which node is running this execution
          type: string
        PublishedResults:
          allOf:
            - $ref: '#/components/schemas/model.StorageSpec'
          description: the published results for this execution
        RunOutput:
          allOf:
            - $ref: '#/components/schemas/model.RunCommandResult'
          description: RunOutput of the job
        State:
          allOf:
            - $ref: '#/components/schemas/model.ExecutionStateType'
          description: State is the current state of the execution
        Status:
          description: an arbitrary status message
          type: string
        UpdateTime:
          description: UpdateTime is the time when the job state was last updated.
          type: string
        Version:
          description: >-
            Version is the version of the job state. It is incremented every
            time the job state is updated.
          type: integer
      type: object
    model.ExecutionStateType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
      type: integer
      x-enum-comments:
        ExecutionStateBidAccepted: aka running
      x-enum-varnames:
        - ExecutionStateUndefined
        - ExecutionStateNew
        - ExecutionStateAskForBid
        - ExecutionStateAskForBidAccepted
        - ExecutionStateAskForBidRejected
        - ExecutionStateBidAccepted
        - ExecutionStateBidRejected
        - ExecutionStateCompleted
        - ExecutionStateFailed
        - ExecutionStateCancelled
    model.Job:
      properties:
        APIVersion:
          example: V1beta1
          type: string
        Metadata:
          allOf:
            - $ref: '#/components/schemas/model.Metadata'
          description: >-
            TODO this doesn't seem like it should be a part of the job as it
            cannot be known by a client ahead of time.
        Spec:
          allOf:
            - $ref: '#/components/schemas/model.Spec'
          description: The specification of this job.
      type: object
    model.JobCancelPayload:
      properties:
        ClientID:
          description: the id of the client that is submitting the job
          type: string
        JobID:
          description: the job id of the job to be canceled
          type: string
        Reason:
          description: The reason that the job is being canceled
          type: string
      required:
        - ClientID
        - JobID
      type: object
    model.JobCreatePayload:
      properties:
        APIVersion:
          example: V1beta1
          type: string
        ClientID:
          description: the id of the client that is submitting the job
          type: string
        Spec:
          allOf:
            - $ref: '#/components/schemas/model.Spec'
          description: The specification of this job.
      required:
        - APIVersion
        - ClientID
        - Spec
      type: object
    model.JobHistory:
      properties:
        Comment:
          type: string
        ComputeReference:
          type: string
        ExecutionState:
          $ref: '#/components/schemas/model.StateChange-model_ExecutionStateType'
        JobID:
          type: string
        JobState:
          $ref: '#/components/schemas/model.StateChange-model_JobStateType'
        NewVersion:
          type: integer
        NodeID:
          type: string
        Time:
          type: string
        Type:
          $ref: '#/components/schemas/model.JobHistoryType'
      type: object
    model.JobHistoryType:
      enum:
        - 0
        - 1
        - 2
      type: integer
      x-enum-varnames:
        - jobHistoryTypeUndefined
        - JobHistoryTypeJobLevel
        - JobHistoryTypeExecutionLevel
    model.JobRequester:
      properties:
        RequesterNodeID:
          description: The ID of the requester node that owns this job.
          example: QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF
          type: string
        RequesterPublicKey:
          description: |-
            The public key of the Requester node that created this job
            This can be used to encrypt messages back to the creator
          type: string
      type: object
    model.JobSpecDocker:
      properties:
        Entrypoint:
          description: optionally override the default entrypoint
          items:
            type: string
          type: array
        EnvironmentVariables:
          description: a map of env to run the container with
          items:
            type: string
          type: array
        Image:
          description: this should be pullable by docker
          type: string
        Parameters:
          description: Parameters holds additional commandline arguments
          items:
            type: string
          type: array
        WorkingDirectory:
          description: working directory inside the container
          type: string
      type: object
    model.JobSpecWasm:
      properties:
        EntryModule:
          allOf:
            - $ref: '#/components/schemas/model.StorageSpec'
          description: The module that contains the WASM code to start running.
        EntryPoint:
          description: >-
            The name of the function in the EntryModule to call to run the job.
            For

            WASI jobs, this will always be `_start`, but jobs can choose to call

            other WASM functions instead. The EntryPoint must be a
            zero-parameter

            zero-result function.
          type: string
        EnvironmentVariables:
          additionalProperties:
            type: string
          description: The variables available in the environment of the running program.
          type: object
        ImportModules:
          description: >-
            TODO #880: Other WASM modules whose exports will be available as
            imports

            to the EntryModule.
          items:
            $ref: '#/components/schemas/model.StorageSpec'
          type: array
        Parameters:
          description: The arguments supplied to the program (i.e. as ARGV).
          items:
            type: string
          type: array
      type: object
    model.JobState:
      properties:
        CreateTime:
          description: CreateTime is the time when the job was created.
          type: string
        Executions:
          description: >-
            Executions is a list of executions of the job across the nodes.

            A new execution is created when a node is selected to execute the
            job, and a node can have multiple executions for the same

            job due to retries, but there can only be a single active execution
            per node at any given time.
          items:
            $ref: '#/components/schemas/model.ExecutionState'
          type: array
        JobID:
          description: JobID is the unique identifier for the job
          type: string
        State:
          allOf:
            - $ref: '#/components/schemas/model.JobStateType'
          description: State is the current state of the job
        TimeoutAt:
          description: >-
            TimeoutAt is the time when the job will be timed out if it is not
            completed.
          type: string
        UpdateTime:
          description: UpdateTime is the time when the job state was last updated.
          type: string
        Version:
          description: >-
            Version is the version of the job state. It is incremented every
            time the job state is updated.
          type: integer
      type: object
    model.JobStateType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      x-enum-varnames:
        - JobStateUndefined
        - JobStateNew
        - JobStateInProgress
        - JobStateCancelled
        - JobStateError
        - JobStateCompleted
        - JobStateQueued
    model.JobWithInfo:
      properties:
        History:
          description: >-
            History of changes to the job state. Not always populated in the job
            description
          items:
            $ref: '#/components/schemas/model.JobHistory'
          type: array
        Job:
          allOf:
            - $ref: '#/components/schemas/model.Job'
          description: Job info
        State:
          allOf:
            - $ref: '#/components/schemas/model.JobState'
          description: The current state of the job
      type: object
    model.LabelSelectorRequirement:
      properties:
        Key:
          description: key is the label key that the selector applies to.
          type: string
        Operator:
          allOf:
            - $ref: '#/components/schemas/selection.Operator'
          description: |-
            operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
        Values:
          description: >-
            values is an array of string values. If the operator is In or NotIn,

            the values array must be non-empty. If the operator is Exists or
            DoesNotExist,

            the values array must be empty. This array is replaced during a
            strategic
          items:
            type: string
          type: array
      type: object
    model.LogsPayload:
      properties:
        ClientID:
          description: the id of the client that is requesting the logs
          type: string
        ExecutionID:
          description: the execution to be shown
          type: string
        Follow:
          description: whether the logs should be followed after the current logs are shown
          type: boolean
        JobID:
          description: the job id of the job to be shown
          type: string
        WithHistory:
          description: whether the logs history is required
          type: boolean
      required:
        - ClientID
        - ExecutionID
        - JobID
      type: object
    model.Metadata:
      properties:
        ClientID:
          description: The ID of the client that created this job.
          example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
          type: string
        CreatedAt:
          description: Time the job was submitted to the bacalhau network.
          example: '2022-11-17T13:29:01.871140291Z'
          type: string
        ID:
          description: The unique global ID of this job in the bacalhau network.
          example: 92d5d4ee-3765-4f78-8353-623f5f26df08
          type: string
        Requester:
          $ref: '#/components/schemas/model.JobRequester'
      type: object
    model.Network:
      enum:
        - 0
        - 1
        - 2
      type: integer
      x-enum-varnames:
        - NetworkNone
        - NetworkFull
        - NetworkHTTP
    model.NetworkConfig:
      properties:
        Domains:
          items:
            type: string
          type: array
        Type:
          $ref: '#/components/schemas/model.Network'
      type: object
    model.NodeInfo:
      properties:
        BacalhauVersion:
          $ref: '#/components/schemas/model.BuildVersionInfo'
        ComputeNodeInfo:
          $ref: '#/components/schemas/model.ComputeNodeInfo'
        Labels:
          additionalProperties:
            type: string
          type: object
        NodeType:
          $ref: '#/components/schemas/model.NodeType'
        PeerInfo:
          $ref: '#/components/schemas/peer.AddrInfo'
      type: object
    model.NodeType:
      enum:
        - 0
        - 1
      type: integer
      x-enum-varnames:
        - NodeTypeRequester
        - NodeTypeCompute
    model.PublishedResult:
      properties:
        Data:
          $ref: '#/components/schemas/model.StorageSpec'
        NodeID:
          type: string
      type: object
    model.Publisher:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      type: integer
      x-enum-comments:
        publisherDone: must be last
        publisherUnknown: must be first
      x-enum-varnames:
        - publisherUnknown
        - PublisherNoop
        - PublisherIpfs
        - PublisherEstuary
        - PublisherS3
        - publisherDone
    model.PublisherSpec:
      properties:
        Params:
          additionalProperties: true
          type: object
        Type:
          $ref: '#/components/schemas/model.Publisher'
      type: object
    model.ResourceUsageConfig:
      properties:
        CPU:
          description: 'https://github.com/BTBurke/k8sresource string'
          type: string
        Disk:
          type: string
        GPU:
          description: unsigned integer string
          type: string
        Memory:
          description: github.com/c2h5oh/datasize string
          type: string
      type: object
    model.ResourceUsageData:
      properties:
        CPU:
          description: cpu units
          example: 9.600000000000001
          type: number
        Disk:
          description: bytes
          example: 212663867801
          type: integer
        GPU:
          example: 1
          type: integer
        Memory:
          description: bytes
          example: 27487790694
          type: integer
      type: object
    model.RunCommandResult:
      properties:
        exitCode:
          description: exit code of the run.
          type: integer
        runnerError:
          description: Runner error
          type: string
        stderr:
          description: stderr of the run.
          type: string
        stderrtruncated:
          description: bool describing if stderr was truncated
          type: boolean
        stdout:
          description: stdout of the run. Yaml provided for `describe` output
          type: string
        stdouttruncated:
          description: bool describing if stdout was truncated
          type: boolean
      type: object
    model.S3StorageSpec:
      properties:
        Bucket:
          type: string
        Checksum:
          type: string
        Endpoint:
          type: string
        Key:
          type: string
        Region:
          type: string
        VersionID:
          type: string
      type: object
    model.Spec:
      properties:
        Annotations:
          description: Annotations on the job - could be user or machine assigned
          items:
            type: string
          type: array
        Deal:
          allOf:
            - $ref: '#/components/schemas/model.Deal'
          description: >-
            The deal the client has made, such as which job bids they have
            accepted.
        DoNotTrack:
          description: Do not track specified by the client
          type: boolean
        Docker:
          allOf:
            - $ref: '#/components/schemas/model.JobSpecDocker'
          description: executor specific data
        Engine:
          allOf:
            - $ref: '#/components/schemas/model.Engine'
          description: e.g. docker or language
        Inputs:
          description: |-
            the data volumes we will read in the job
            for example "read this ipfs cid"
          items:
            $ref: '#/components/schemas/model.StorageSpec'
          type: array
        Network:
          allOf:
            - $ref: '#/components/schemas/model.NetworkConfig'
          description: The type of networking access that the job needs
        NodeSelectors:
          description: >-
            NodeSelectors is a selector which must be true for the compute node
            to run this job.
          items:
            $ref: '#/components/schemas/model.LabelSelectorRequirement'
          type: array
        Outputs:
          description: |-
            the data volumes we will write in the job
            for example "write the results to ipfs"
          items:
            $ref: '#/components/schemas/model.StorageSpec'
          type: array
        Publisher:
          allOf:
            - $ref: '#/components/schemas/model.Publisher'
          description: |-
            there can be multiple publishers for the job
            deprecated: use PublisherSpec instead
        PublisherSpec:
          $ref: '#/components/schemas/model.PublisherSpec'
        Resources:
          allOf:
            - $ref: '#/components/schemas/model.ResourceUsageConfig'
          description: 'the compute (cpu, ram) resources this job requires'
        Timeout:
          description: |-
            How long a job can run in seconds before it is killed.
            This includes the time required to run, verify and publish results
          type: integer
        Wasm:
          $ref: '#/components/schemas/model.JobSpecWasm'
      type: object
    model.StateChange-model_ExecutionStateType:
      properties:
        New:
          $ref: '#/components/schemas/model.ExecutionStateType'
        Previous:
          $ref: '#/components/schemas/model.ExecutionStateType'
      type: object
    model.StateChange-model_JobStateType:
      properties:
        New:
          $ref: '#/components/schemas/model.JobStateType'
        Previous:
          $ref: '#/components/schemas/model.JobStateType'
      type: object
    model.StorageSourceType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
      type: integer
      x-enum-comments:
        storageSourceDone: must be last
        storageSourceUnknown: must be first
      x-enum-varnames:
        - storageSourceUnknown
        - StorageSourceIPFS
        - StorageSourceRepoClone
        - StorageSourceRepoCloneLFS
        - StorageSourceURLDownload
        - StorageSourceEstuary
        - StorageSourceInline
        - StorageSourceLocalDirectory
        - StorageSourceS3
        - storageSourceDone
    model.StorageSpec:
      properties:
        CID:
          description: >-
            The unique ID of the data, where it makes sense (for example, in an

            IPFS storage spec this will be the data's CID).

            NOTE: The below is capitalized to match IPFS & IPLD (even though
            it's out of golang fmt)
          example: QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe
          type: string
        Metadata:
          additionalProperties:
            type: string
          description: Additional properties specific to each driver
          type: object
        Name:
          description: 'Name of the spec''s data, for reference.'
          example: >-
            job-9304c616-291f-41ad-b862-54e133c0149e-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL
          type: string
        Path:
          description: >-
            The path that the spec's data should be mounted on, where it makes

            sense (for example, in a Docker storage spec this will be a
            filesystem

            path).
          type: string
        ReadWrite:
          description: Allow write access for locally mounted inputs
          type: boolean
        Repo:
          description: URL of the git Repo to clone
          type: string
        S3:
          $ref: '#/components/schemas/model.S3StorageSpec'
        SourcePath:
          description: The path of the host data if we are using local directory paths
          type: string
        StorageSource:
          allOf:
            - $ref: '#/components/schemas/model.StorageSourceType'
          description: >-
            StorageSource is the abstract source of the data. E.g. a storage
            source

            might be a URL download, but doesn't specify how the execution
            engine

            does the download or what it will do with the downloaded data.
        URL:
          description: Source URL of the data
          type: string
      type: object
    peer.AddrInfo:
      properties:
        addrs:
          items: {}
          type: array
        id:
          type: string
      type: object
    publicapi.EventFilterOptions:
      properties:
        exclude_execution_level:
          type: boolean
        exclude_job_level:
          type: boolean
        since:
          type: integer
      type: object
    publicapi.VersionRequest:
      properties:
        client_id:
          example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
          type: string
      type: object
    publicapi.VersionResponse:
      properties:
        build_version_info:
          $ref: '#/components/schemas/model.BuildVersionInfo'
      type: object
    publicapi.cancelRequest:
      properties:
        client_public_key:
          description: 'The base64-encoded public key of the client:'
          type: string
        payload:
          allOf:
            - $ref: '#/components/schemas/model.JobCancelPayload'
          description: The data needed to cancel a running job on the network
        signature:
          description: 'A base64-encoded signature of the data, signed by the client:'
          type: string
      required:
        - client_public_key
        - payload
        - signature
      type: object
    publicapi.cancelResponse:
      properties:
        state:
          $ref: '#/components/schemas/model.JobState'
      type: object
    publicapi.eventsRequest:
      properties:
        client_id:
          example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
          type: string
        filters:
          allOf:
            - $ref: '#/components/schemas/publicapi.EventFilterOptions'
          description: Records the number of seconds since the unix epoch (UTC)
        job_id:
          example: 9304c616-291f-41ad-b862-54e133c0149e
          type: string
      type: object
    publicapi.eventsResponse:
      properties:
        events:
          items:
            $ref: '#/components/schemas/model.JobHistory'
          type: array
      type: object
    publicapi.listRequest:
      properties:
        client_id:
          example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
          type: string
        exclude_tags:
          example:
            - '[''any-tag'']'
          items:
            type: string
          type: array
        id:
          example: 9304c616-291f-41ad-b862-54e133c0149e
          type: string
        include_tags:
          example:
            - '[''any-tag'']'
          items:
            type: string
          type: array
        max_jobs:
          example: 10
          type: integer
        return_all:
          type: boolean
        sort_by:
          example: created_at
          type: string
        sort_reverse:
          type: boolean
      type: object
    publicapi.listResponse:
      properties:
        jobs:
          items:
            $ref: '#/components/schemas/model.JobWithInfo'
          type: array
      type: object
    publicapi.logRequest:
      properties:
        client_public_key:
          description: 'The base64-encoded public key of the client:'
          type: string
        payload:
          allOf:
            - $ref: '#/components/schemas/model.LogsPayload'
          description: The data needed to cancel a running job on the network
        signature:
          description: 'A base64-encoded signature of the data, signed by the client:'
          type: string
      required:
        - client_public_key
        - payload
        - signature
      type: object
    publicapi.resultsResponse:
      properties:
        results:
          items:
            $ref: '#/components/schemas/model.PublishedResult'
          type: array
      type: object
    publicapi.stateRequest:
      properties:
        client_id:
          example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
          type: string
        job_id:
          example: 9304c616-291f-41ad-b862-54e133c0149e
          type: string
      type: object
    publicapi.stateResponse:
      properties:
        state:
          $ref: '#/components/schemas/model.JobState'
      type: object
    publicapi.submitRequest:
      properties:
        client_public_key:
          description: 'The base64-encoded public key of the client:'
          type: string
        payload:
          allOf:
            - $ref: '#/components/schemas/model.JobCreatePayload'
          description: The data needed to cancel a running job on the network
        signature:
          description: 'A base64-encoded signature of the data, signed by the client:'
          type: string
      required:
        - client_public_key
        - payload
        - signature
      type: object
    publicapi.submitResponse:
      properties:
        job:
          $ref: '#/components/schemas/model.Job'
      type: object
    selection.Operator:
      enum:
        - '!'
        - '='
        - '=='
        - in
        - '!='
        - notin
        - exists
        - gt
        - lt
      type: string
      x-enum-varnames:
        - DoesNotExist
        - Equals
        - DoubleEquals
        - In
        - NotEquals
        - NotIn
        - Exists
        - GreaterThan
        - LessThan
    types.FreeSpace:
      properties:
        IPFSMount:
          $ref: '#/components/schemas/types.MountStatus'
        root:
          $ref: '#/components/schemas/types.MountStatus'
        tmp:
          $ref: '#/components/schemas/types.MountStatus'
      type: object
    types.HealthInfo:
      properties:
        FreeSpace:
          $ref: '#/components/schemas/types.FreeSpace'
      type: object
    types.MountStatus:
      properties:
        All:
          type: integer
        Free:
          type: integer
        Used:
          type: integer
      type: object

